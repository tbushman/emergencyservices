extends layout
block page
block content
	
	div.ms-Grid
		div.ms-Grid-row
			div.ms-Grid-col.ms-u-mdPush1.ms-u-md9.ms-u-lgPush1.ms-u-lg6
				
				p.ms-font-l Upload Dataset
				div.ms-Grid-row
					div.ms-Grid-col.ms-u-sm9.ms-u-xl11
						input.ms-Button#dataset(type="file")
				p.ms-font-l or Reload Dataset
				div.ms-Grid-row
					div.ms-Grid-col.ms-u-sm9.ms-u-xl11.ms-Dropdown(tabindex="0")
						
						label.ms-Label Available datasets:
						input.ms-Dropdown-select(list="datasources", name="importpath")
						datalist(id="datasources")
							each item, i in data
								- var keylength = data.featurekeypath.length
								if (keylength > 0)
									if (keylength === 1)
										each key, j in item
											option(value= key)
									if (keylength === 2)
										each key, j in item
											div.dropdown #{key}
												each sub, k in item[key]
													option.drop(value= sub)
				
				p.ms-font-l or Load via url
				div.ms-Grid-row
					div.ms-Grid-col.ms-u-sm9.ms-u-xl11
						label.ms-Label JSON data url
						input.ms-TextField-field#uri(type="text", name="uri")
				
				div.ms-Grid-row
					div.ms-Grid-col.ms-u-sm9.ms-u-xl11
						div.existing
						div.compare
				form#form(enctype="multipart/form-data", method="POST", action="/api/import", style="margin-bottom: 50px")
					input#data(type="hidden", name="data")
					
							
					p
					button.ms-Button.ms-Button--primary#submit(type="submit", ariaDescription="Import Dataset", style="display: none")
						span.ms-Button-label Import
				#info #{info}
		//-
			
	script(type="text/javascript").
		$('#dataset').change(function(e){
			e.preventDefault();
			var dataurl = null;
			var filesToUpload = document.getElementById('dataset').files;
			var file = filesToUpload[0];
			var dataType = file.type;
			console.log(dataType)
			if(dataType !== "application/json") {
				$('.upload-msg').html("<span class='msg-error'>Please Select A valid JSON File</span>");
				return false;
			} else {
				var reader = new FileReader();
				var myData = null;
				reader.onloadend = function(e) {
					myData = e.target.result;
					console.log(myPdf)
					$('#data').val(myData.replace(/^data:application\/json;base64,/, ''));
				}
				reader.readAsDataURL(file);
			}
		});
		$('#uri').change(function(e){
			e.preventDefault();
			var uri = $('#uri').val() + '/query?where=1%3D1&&outFields=*&geometryType=esriGeometryEnvelope&returnGeometry=true&f=pjson'
			$.getJSON(uri, function(dat){
				localStorage.setItem('_loadData', JSON.stringify(dat))
				var keys = Object.keys(dat);
				$('form').append('<ul id="keylist"></ul>')
				for (var i in keys) {
					if (dat[keys[i]].length) {
						$('ul').append('<li><a class="key" href="#" id="'+keys[i]+'">'+keys[i]+'</a></li>');
					}
				}
			})
		});
		
		$(document).on('click', '#compare', function(e){
			e.preventDefault();
			var uri = $('#uri').val() + '/query?where=1%3D1&&outFields=*&geometryType=esriGeometryEnvelope&returnGeometry=true&f=pjson'
			$.getJSON(uri, function(dat){
				localStorage.setItem('_loadData', JSON.stringify(dat));
				var keys = Object.keys(dat);
				$(e.target).parent('li').append('<ul id="keylist"></ul>');
				for (var i in keys) {
					if (dat[keys[i]].length) {
						localStorage.setItem('_keylist', JSON.stringify([]));
						$('#keylist').append('<li><a class="key" href="#keylist" id="'+keys[i]+'">'+keys[i]+'</a></li>');
					}
				}
			});
			return false;
		})
		var getKeys = function(data) {
			var keys = Object.keys(data);
			return keys;
		}
		// breadcrumbs
		var updatedKeyList = function(data, key) {
			var keylist;
			if (!localStorage.getItem('_keylist')) {
				keylist = [];
			} else {
				keylist = JSON.parse(localStorage.getItem('_keylist'));
			}
			keylist.push(key);
			return keylist;
			
		}
		$.getJSON('/mydata/'+0+'/'+0+'/'+0+'', function(data){
			//console.log(Object.keys(data[0]));
			var keys = Object.keys(data[0]);
			for (var i in keys) {
				$('.existing').append('<ul class="contentSchema" id="'+keys[i]+'">'+keys[i]+'</ul>');
				$('.compare').append('<ul class="contentSchema">&nbsp</ul>')

				if (Object.keys(data[0][keys[i]]).length > 0 && isNaN(parseInt(Object.keys(data[0][keys[i]]) ,10))) {
					for (var j in Object.keys(data[0][keys[i]])) {
						var level1Key = Object.keys(data[0][keys[i]])[j]
						
						if (Object.keys(data[0][keys[i]][level1Key]).length > 0 && isNaN(parseInt(Object.keys(data[0][keys[i]][level1Key])[0], 10))) {
							$('.contentSchema#'+keys[i]+'').append('<ul class="levelSchema" id="'+level1Key+'">'+level1Key+'</ul>');
							$('.compare').append('<ul class="levelSchema">&nbsp</ul>')
							for (var k in Object.keys(data[0][keys[i]][level1Key])) {
								var level2Key = Object.keys(data[0][keys[i]][level1Key])[k];
								if (level2Key = 'coordinates') {
									$('.levelSchema#'+level1Key+'').append('<li>'+level2Key+' lat</li>');
									$('.levelSchema#'+level1Key+'').append('<li>'+level2Key+' lng</li>');
									$('.compare').append('<li><a href="#keylist" id="compare">Select lat field</a></li>')
									$('.compare').append('<li><a href="#keylist" id="compare">Select lat field</a></li>');
									$('form').append('<input id="lat" name="lat"></input>')
									$('form').append('<input id="lng" name="lng"></input>')

								} else {
									$('.levelSchema#'+level1Key+'').append('<li>'+level2Key+'</li>');
									$('.compare').append('<li><a href="#keylist" id="compare">Select '+level2Key+' field</a></li>')
									$('form').append('<input id="'+level2Key+'" name="'+level2Key+'"></input>')
								}
							}
						} else {
							$('.contentSchema#'+keys[i]+'').append('<li>'+level1Key+'</li>');
							$('.compare').append('<li><a href="#keylist" id="compare">Select '+level1Key+' field</a></li>')
							$('form').append('<input id="'+level1Key+'" name="'+level1Key+'"></input>')
						}
					}
				}
				console.log(Object.keys(data[0][keys[i]]))
			}
		})
		$(document).on('click', '.key', function(){
			//$('.appended').remove();
			$(this).css('color', '#000');
			var key = $(this).attr('id');
			var keylist;
			if (!localStorage.getItem('_keylist')){
				keylist = []
			} else {
				keylist = JSON.parse(localStorage.getItem('_keylist'));				
			}
			if ($(this).parent('li').children('ul').length > 0) {
				var thiskey = $(this).attr('id');
				var thisindex = keylist.indexOf(thiskey)
				keylist.splice(keylist.indexOf(thiskey), keylist.length - thisindex);
				localStorage.setItem('_keylist', JSON.stringify(keylist));
				console.log($(this).parent('li').children('ul'))
				$(this).parent('li').children('ul').remove();
				$(this).css('color', 'green');
			} else {
				var dat = JSON.parse(localStorage.getItem('_loadData'));
				var check;
				if (Array.isArray(dat)) {
					localStorage.setItem('_loadData', JSON.stringify(dat));
					dat = dat[0];
				} else {
					localStorage.setItem('_loadData', JSON.stringify(dat[key]));
				}
				if (Array.isArray(dat[key])){
					check = dat[key][0]
				} else {
					check = dat[key]
				}

				if (check && Object.keys(check).length) {
					keylist.push(key);
					console.log(keylist, dat)
					localStorage.setItem('_keylist', JSON.stringify(keylist))
					$(this).parent('li').append('<ul class="appended" id="'+key+'"></ul>');
					var sublevelKeys = [];
					var levelKeys = getKeys(check);
					//console.log(localStorage.getItem('_keylist'), localStorage.getItem('_loadData'))
					for (var i in levelKeys) {
						$('ul.appended#'+key+'').append('<li><a class="key" href="#keylist" id="'+levelKeys[i]+'">'+levelKeys[i]+'</a><a class="selectKey">&#9634;</a></li>');
						//console.log(Object.keys(check[levelKeys[i]]));
						/*sublevelKeys.push(getKeys(check[levelKeys[i]]));
						if (!Array.isArray(check[levelKeys[i]])) {
							if (check[levelKeys[i]] !== undefined) {
								$('ul#'+key+'').append('<li><a class="key" href="#" id="'+Object.keys(check[levelKeys[i]])+'">'+Object.keys(check[levelKeys[i]])+'</a></li>');
							}
						} else {
							if (check[levelKeys[i]][0] !== undefined) {
								$('ul#'+key+'').append('<li><a class="key array" href="#" id="'+Object.keys(check[levelKeys[i]][0])+'">'+Object.keys(check[levelKeys[i]][0])+'</a></li>');					
							}
						}//for (var j in check[levelKeys[i]][0]){
						//						}*/
					}
				}
			}
		})